// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Tokenizer > should call function with the arguments (without dot operator) as reference unless quoted 1`] = `
[
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "fn",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "reference",
    "value": "name",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "fn(name);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should call function with the arguments (without dot operator) as reference unless quoted 2`] = `
[
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "fn",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "reference",
    "value": "name",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "fn(name(string));",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize @use scope reference 1`] = `
[
  {
    "type": "command_type",
    "value": "scope_use",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "pipe",
  },
  {
    "escaped": false,
    "key": "silent",
    "otherValues": [],
    "type": "named_arg",
    "value": "true",
  },
  {
    "type": "input",
    "value": "@use.set|silent=true;",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "alert",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "literal",
    "value": "Welcome",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "comma",
  },
  {
    "type": "reference",
    "value": "user.id",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "comma",
  },
  {
    "type": "literal",
    "value": "3000",
  },
  {
    "type": "cast",
    "value": "number",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "alert("Welcome"(string), user.id(string), 3000(number));",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access (of type string without quotes) as a reference 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name[id]",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name",
  },
  {
    "type": "input",
    "value": "state.set:user.name[id]->name;",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access (of type string without quotes) as a target 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name[id]",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "input",
    "value": "state.set:user.name->name[id](string);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access (of type string) as a reference 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name['id']",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name",
  },
  {
    "type": "input",
    "value": "state.set:user.name['id']->name;",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access (of type string) as a target 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name['id']",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "input",
    "value": "state.set:user.name->name['id'](string);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access (with deep nesting) as a reference 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name['id'][0].friends[0].id",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name",
  },
  {
    "type": "input",
    "value": "state.set:user.name['id'][0].friends[0].id->name;",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access as a reference 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name[0]",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name",
  },
  {
    "type": "input",
    "value": "state.set:user.name[0]->name;",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize an array access as a target 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "user.name",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "name[0]",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "input",
    "value": "state.set:user.name->name[0](string);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize basic set command with literal 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "x",
  },
  {
    "type": "arrow",
  },
  {
    "type": "literal",
    "value": "10",
  },
  {
    "type": "input",
    "value": "set:x->10;",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize booleans and casts 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "ready",
  },
  {
    "type": "arrow",
  },
  {
    "type": "literal",
    "value": "true",
  },
  {
    "type": "cast",
    "value": "bool",
  },
  {
    "type": "pipe",
  },
  {
    "type": "positional_arg",
    "value": "user",
  },
  {
    "escaped": false,
    "key": "option",
    "otherValues": [
      "operator",
      "name.id",
    ],
    "type": "named_arg",
    "value": "foo",
  },
  {
    "type": "input",
    "value": "set:ready->true(bool)|'user',option='foo,operator,name.id';",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "flag",
  },
  {
    "type": "arrow",
  },
  {
    "type": "literal",
    "value": "false",
  },
  {
    "type": "cast",
    "value": "bool",
  },
  {
    "type": "input",
    "value": "set:flag->false(bool);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize casted literals and references 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command_group",
    "value": "state",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "x",
  },
  {
    "type": "arrow",
  },
  {
    "type": "literal",
    "value": "45",
  },
  {
    "type": "cast",
    "value": "number",
  },
  {
    "type": "input",
    "value": "state.set:x->45(number);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "command",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "y",
  },
  {
    "type": "arrow",
  },
  {
    "type": "reference",
    "value": "user.id",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "input",
    "value": "set:y->user.id(string);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize function call with mixed arguments 1`] = `
[
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "alert",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "literal",
    "value": "Welcome",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "comma",
  },
  {
    "type": "reference",
    "value": "user.id",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "comma",
  },
  {
    "type": "literal",
    "value": "3000",
  },
  {
    "type": "cast",
    "value": "number",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "alert("Welcome"(string), user.id(string), 3000(number));",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize multiple calls separated by semicolon 1`] = `
[
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "show",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "literal",
    "value": "Saved!",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "show("Saved!"(string));",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "refresh",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "refresh();",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "log",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "literal",
    "value": "done",
  },
  {
    "type": "cast",
    "value": "string",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "log("done"(string));",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize reference chaining with @scope 1`] = `
[
  {
    "type": "command_type",
    "value": "normal",
  },
  {
    "type": "reference",
    "value": "set",
  },
  {
    "type": "reference",
    "value": "this.user.age",
  },
  {
    "type": "arrow",
  },
  {
    "type": "literal",
    "value": "30",
  },
  {
    "type": "cast",
    "value": "number",
  },
  {
    "type": "input",
    "value": "set:@this.user.age->30(number);",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;

exports[`Tokenizer > should tokenize simple function call with no cast 1`] = `
[
  {
    "type": "command_type",
    "value": "call",
  },
  {
    "type": "reference",
    "value": "log",
  },
  {
    "type": "paren_open",
  },
  {
    "type": "literal",
    "value": "debug",
  },
  {
    "type": "paren_close",
  },
  {
    "type": "input",
    "value": "log("debug");",
  },
  {
    "type": "semicolon",
  },
  {
    "type": "eof",
  },
]
`;
